[PHP]

; Exposes to the world that PHP is installed on the server, which includes the PHP version within the
; HTTP header (e.g., X-Powered-By: PHP/5.3.7). (Default: 1)
expose_php = 0

; When set to 1, assertion code will be generated and executed (development mode). When set to 0,
; assertion code will be generated but it will be skipped (not executed) at runtime. When set to -1, assertion
; code will not be generated, making the assertions zero-cost (production mode).
;
; Note: If a process is started in production mode, zend.assertions cannot be changed at runtime, since the code
; for assertions was not generated. If a process is started in development mode, zend.assertions cannot be set
; to -1 at runtime. (Default: 1)
zend.assertions = ${PHP_ZEND_ASSERTIONS:-1}

; This sets the maximum time in seconds a script is allowed to run before it is terminated by the parser.
; This helps prevent poorly written scripts from tying up the server. The default setting is 30. When
; running PHP from the command line the default setting is 0.
; Your web server can have other timeout configurations that may also interrupt PHP execution. Apache
; has a Timeout directive and IIS has a CGI timeout function. Both default to 300 seconds. See your web
; server documentation for specific details. (Default: 30)
max_execution_time = ${PHP_MAX_EXECUTION_TIME:-30}

; This sets the maximum amount of memory in bytes that a script is allowed to allocate. This helps
; prevent poorly written scripts for eating up all available memory on a server. Note that to have no
; memory limit, set this directive to -1.
; When an int is used, the value is measured in bytes. Shorthand notation, as described in this FAQ, may
; also be used. (Default: 128M)
memory_limit = ${PHP_MEMORY_LIMIT:-128M}

; This determines whether errors should be printed to the screen as part of the output or if they should
; be hidden from the user. Value "stderr" sends the errors to stderr instead of stdout.
;
; Note: This is a feature to support your development and should never be used on production systems (e.g.
; systems connected to the internet). Although display_errors may be set at runtime (with ini_set()), it
; won't have any effect if the script has fatal errors. This is because the desired runtime action does not
; get executed. (Default: 1)
display_errors = ${PHP_DISPLAY_ERRORS:-0}

; Even when display_errors is on, errors that occur during PHP's startup sequence are not displayed. It's
; strongly recommended to keep display_startup_errors off, except for debugging. (Default: 1)
display_startup_errors = ${PHP_DISPLAY_STARTUP_ERRORS:-0}

; Tells whether script error messages should be logged to the server's error log or error_log. This option is thus
; server-specific. (Default: 0)
log_errors = 1

; Name of the file where script errors should be logged. The file should be writable by the web server's user.
; If the special value syslog is used, the errors are sent to the system logger instead. On Unix, this means
; syslog(3) and on Windows it means the event log. See also: syslog(). If this directive is not set, errors are
; sent to the SAPI error logger. For example, it is an error log in Apache or stderr in CLI. See also error_log().
; (Default: null)
error_log = ${PHP_ERROR_LOG:-/dev/stderr}
